name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOTNET_VERSION: '8.0.x'
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18.x'

jobs:
  test-dotnet:
    runs-on: ubuntu-latest
    name: 🧪 .NET Tests
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: TestPassword123!
        ports:
          - 1433:1433
        options: >-
          --health-cmd="/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P TestPassword123! -Q 'SELECT 1'"
          --health-interval=10s
          --health-timeout=3s
          --health-retries=3
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔧 Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: 📦 Restore dependencies
      run: dotnet restore ScoutVision.sln
    
    - name: 🏗️ Build
      run: dotnet build ScoutVision.sln --no-restore --configuration Release
    
    - name: 🧪 Run tests
      run: dotnet test ScoutVision.sln --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage"
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=ScoutVisionTestDB;User Id=sa;Password=TestPassword123!;TrustServerCertificate=true"
    
    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: coverage.cobertura.xml
        fail_ci_if_error: false

  test-python:
    runs-on: ubuntu-latest
    name: 🐍 Python AI Tests
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: 📦 Install dependencies
      run: |
        cd src/ScoutVision.AI
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: 🧪 Run Python tests
      run: |
        cd src/ScoutVision.AI
        pytest tests/ --cov=. --cov-report=xml --cov-report=html
    
    - name: 📊 Upload Python coverage
      uses: codecov/codecov-action@v3
      with:
        files: src/ScoutVision.AI/coverage.xml
        flags: python
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    name: 🔒 Security Scan
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    runs-on: ubuntu-latest
    name: 🐳 Build & Push Docker Images
    needs: [test-dotnet, test-python, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔐 Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: 📊 Extract metadata
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/api
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🏗️ Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/ScoutVision.API/Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 📊 Extract metadata for Web
      id: meta-web
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/web
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🏗️ Build and push Web image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: src/ScoutVision.Web/Dockerfile
        push: true
        tags: ${{ steps.meta-web.outputs.tags }}
        labels: ${{ steps.meta-web.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: 📊 Extract metadata for AI
      id: meta-ai
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}/ai
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: 🏗️ Build and push AI image
      uses: docker/build-push-action@v5
      with:
        context: src/ScoutVision.AI
        file: src/ScoutVision.AI/Dockerfile
        push: true
        tags: ${{ steps.meta-ai.outputs.tags }}
        labels: ${{ steps.meta-ai.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    name: 🚀 Deploy to Staging
    needs: [build-and-push]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: 🚀 Deploy to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ secrets.AZURE_RG }}
        dns-name-label: scoutvision-staging-${{ github.run_number }}
        image: ghcr.io/${{ github.repository }}/api:${{ github.sha }}
        registry-login-server: ghcr.io
        registry-username: ${{ github.actor }}
        registry-password: ${{ secrets.GITHUB_TOKEN }}
        name: scoutvision-staging
        location: 'East US'

  deploy-production:
    runs-on: ubuntu-latest
    name: 🏭 Deploy to Production
    needs: [build-and-push]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
    
    - name: 🔐 Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: 🚀 Deploy API to Azure App Service
      uses: azure/webapps-deploy@v2
      with:
        app-name: ${{ secrets.AZURE_WEBAPP_NAME }}
        images: ghcr.io/${{ github.repository }}/api:latest
    
    - name: 🚀 Deploy AI Service to Azure Container Instances
      uses: azure/aci-deploy@v1
      with:
        resource-group: ${{ secrets.AZURE_RG }}
        dns-name-label: scoutvision-ai-prod
        image: ghcr.io/${{ github.repository }}/ai:latest
        registry-login-server: ghcr.io
        registry-username: ${{ github.actor }}
        registry-password: ${{ secrets.GITHUB_TOKEN }}
        name: scoutvision-ai-prod
        location: 'East US'
        cpu: 2
        memory: 4
        environment-variables: |
          PYTHONUNBUFFERED=1
          API_HOST=0.0.0.0
          API_PORT=8000

  notify:
    runs-on: ubuntu-latest
    name: 📢 Notify
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 📢 Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: |
          🎯 ScoutVision deployment completed!
          📝 Commit: ${{ github.sha }}
          👤 Author: ${{ github.actor }}
          🔗 Repository: ${{ github.repository }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()