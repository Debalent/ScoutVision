@page "/search-simple"
@inject IJSRuntime JSRuntime

<div class="container-fluid mt-4">
    <div class="card mb-4">
        <div class="card-header">
            <h4>ScoutVision Search</h4>
        </div>
        <div class="card-body">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <input type="text" 
                           class="form-control" 
                           placeholder="Search players, footage, statistics..." 
                           @bind="searchQuery" 
                           @onkeypress="OnSearchKeyPress" />
                </div>
                <div class="col-md-4">
                    <button class="btn btn-primary w-100" @onclick="ExecuteSearch">
                        üîç Search
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="card">
            <div class="card-body text-center py-5">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <p class="mt-3">Searching...</p>
            </div>
        </div>
    }
    else if (searchResults.Any())
    {
        <div class="card mb-4">
            <div class="card-body">
                <h6>Found @totalResults results for "@lastSearchQuery"</h6>
            </div>
        </div>

        @if (playerResults.Any())
        {
            <div class="card mb-4">
                <div class="card-header">
                    <h6>Players (@playerResults.Count)</h6>
                </div>
                <div class="card-body">
                    <div class="row">
                        @foreach (var player in playerResults)
                        {
                            <div class="col-md-6 col-lg-4 mb-3">
                                <div class="card h-100">
                                    <div class="card-body">
                                        <h6 class="card-title">@player.FullName</h6>
                                        <p class="card-text">
                                            <small class="text-muted">
                                                @player.Position ‚Ä¢ @player.CurrentTeam<br>
                                                Age: @player.Age ‚Ä¢ @player.Nationality
                                            </small>
                                        </p>
                                        <span class="badge bg-@GetPriorityBadgeColor(player.Priority)">
                                            @player.Priority Priority
                                        </span>
                                    </div>
                                    <div class="card-footer">
                                        <button class="btn btn-sm btn-outline-primary" 
                                                @onclick="() => ViewPlayerDetails(player.Id)">
                                            View Details
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        <div class="card">
            <div class="card-body">
                <nav aria-label="Search results pagination">
                    <ul class="pagination justify-content-center mb-0">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)">Previous</button>
                        </li>
                        @for (int i = 1; i <= totalPages; i++)
                        {
                            <li class="page-item @(i == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(i)">@i</button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)">Next</button>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    }
    else if (!isLoading && hasSearched)
    {
        <div class="card">
            <div class="card-body text-center py-5">
                <h5>üîç No results found</h5>
                <p class="text-muted">Try adjusting your search terms</p>
                <button class="btn btn-outline-primary" @onclick="ClearSearch">
                    Clear Search
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="card">
            <div class="card-body text-center py-5">
                <h5>üéØ Discover Players, Footage, and Statistics</h5>
                <p class="text-muted mb-4">Use our powerful search to find exactly what you're looking for</p>
                
                <div class="row">
                    <div class="col-md-4 mb-3">
                        <div class="card border-primary">
                            <div class="card-body text-center">
                                <h6>üë§ Smart Player Search</h6>
                                <p class="small text-muted">AI-powered player discovery</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card border-success">
                            <div class="card-body text-center">
                                <h6>üìä Advanced Analytics</h6>
                                <p class="small text-muted">Performance metrics & insights</p>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-4 mb-3">
                        <div class="card border-info">
                            <div class="card-body text-center">
                                <h6>üé• Game Footage</h6>
                                <p class="small text-muted">Searchable video library</p>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="mt-4">
                    <h6>Popular Searches:</h6>
                    @foreach (var suggestion in popularSearches)
                    {
                        <button class="btn btn-outline-secondary btn-sm me-2 mb-2" 
                                @onclick="() => QuickSearch(suggestion)">
                            @suggestion
                        </button>
                    }
                </div>
            </div>
        </div>
    }
</div>

@code {
    private string searchQuery = string.Empty;
    private string lastSearchQuery = string.Empty;
    private bool isLoading = false;
    private bool hasSearched = false;

    private List<object> searchResults = new();
    private List<Player> playerResults = new();
    private int totalResults = 0;
    private int currentPage = 1;
    private int totalPages = 1;
    private const int pageSize = 20;

    private List<string> popularSearches = new()
    {
        "young forwards", "premier league", "defensive midfielders", 
        "la liga highlights", "champions league", "bundesliga stats"
    };

    private async Task OnSearchKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await ExecuteSearch();
        }
    }

    private async Task ExecuteSearch()
    {
        if (string.IsNullOrWhiteSpace(searchQuery)) return;

        isLoading = true;
        hasSearched = true;
        lastSearchQuery = searchQuery;
        currentPage = 1;

        try
        {
            // Simulate API delay
            await Task.Delay(1000);
            
            // Mock search results
            playerResults = GenerateMockPlayers(searchQuery);
            searchResults = new List<object>(playerResults);
            totalResults = playerResults.Count;
            totalPages = (int)Math.Ceiling((double)totalResults / pageSize);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Search error: {ex.Message}");
            playerResults = new();
            searchResults = new();
            totalResults = 0;
            totalPages = 0;
        }
        finally
        {
            isLoading = false;
        }
    }

    private List<Player> GenerateMockPlayers(string query)
    {
        var mockPlayers = new List<Player>
        {
            new() { Id = 1, FirstName = "Lionel", LastName = "Messi", Position = "Forward", CurrentTeam = "Inter Miami", Age = 36, Nationality = "Argentina", Priority = ScoutingPriority.High },
            new() { Id = 2, FirstName = "Kylian", LastName = "Mbapp√©", Position = "Forward", CurrentTeam = "PSG", Age = 24, Nationality = "France", Priority = ScoutingPriority.High },
            new() { Id = 3, FirstName = "Erling", LastName = "Haaland", Position = "Forward", CurrentTeam = "Manchester City", Age = 23, Nationality = "Norway", Priority = ScoutingPriority.High },
            new() { Id = 4, FirstName = "Pedri", LastName = "Gonz√°lez", Position = "Midfielder", CurrentTeam = "FC Barcelona", Age = 21, Nationality = "Spain", Priority = ScoutingPriority.Medium },
            new() { Id = 5, FirstName = "Jude", LastName = "Bellingham", Position = "Midfielder", CurrentTeam = "Real Madrid", Age = 20, Nationality = "England", Priority = ScoutingPriority.High }
        };

        // Simple filter based on query
        return mockPlayers.Where(p => 
            p.FullName.Contains(query, StringComparison.OrdinalIgnoreCase) ||
            p.Position.Contains(query, StringComparison.OrdinalIgnoreCase) ||
            p.CurrentTeam.Contains(query, StringComparison.OrdinalIgnoreCase) ||
            p.Nationality.Contains(query, StringComparison.OrdinalIgnoreCase)
        ).ToList();
    }

    private async Task QuickSearch(string query)
    {
        searchQuery = query;
        await ExecuteSearch();
    }

    private void ClearSearch()
    {
        searchQuery = string.Empty;
        lastSearchQuery = string.Empty;
        hasSearched = false;
        searchResults.Clear();
        playerResults.Clear();
        totalResults = 0;
        currentPage = 1;
        totalPages = 0;
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        await ExecuteSearch();
    }

    private void ViewPlayerDetails(int playerId)
    {
        // Navigate to player details
        Console.WriteLine($"Viewing player details for ID: {playerId}");
    }

    private string GetPriorityBadgeColor(ScoutingPriority priority)
    {
        return priority switch
        {
            ScoutingPriority.High => "danger",
            ScoutingPriority.Medium => "warning",
            ScoutingPriority.Low => "info",
            _ => "secondary"
        };
    }
}