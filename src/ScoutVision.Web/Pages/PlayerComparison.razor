@page "/player-comparison"
@using ScoutVision.Web.Services
@inject IPlayerAnalyticsService AnalyticsService
@inject IJSRuntime JS

<div class="container-fluid py-4">
    <div class="row mb-4">
        <div class="col-12">
            <h1 class="display-4">
                <i class="bi bi-people-fill"></i>
                Player Comparison Tool
            </h1>
            <p class="lead text-muted">Compare multiple players side-by-side across various metrics</p>
        </div>
    </div>

    <!-- Player Selection -->
    <div class="row mb-4">
        <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0"><i class="bi bi-person-plus"></i> Select Players to Compare</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-8">
                            <label class="form-label">Player IDs (comma-separated)</label>
                            <input type="text" class="form-control form-control-lg" 
                                   @bind="playerIdsInput" 
                                   placeholder="e.g., 1, 2, 3, 4, 5" />
                            <small class="text-muted">Enter 2-5 player IDs to compare</small>
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">Comparison Metric</label>
                            <select class="form-select form-select-lg" @bind="selectedMetric">
                                <option value="Overall">Overall Rating</option>
                                <option value="Goals">Goals</option>
                                <option value="Assists">Assists</option>
                                <option value="PassAccuracy">Pass Accuracy</option>
                                <option value="DuelsWon">Duels Won</option>
                                <option value="Tackles">Tackles</option>
                                <option value="Interceptions">Interceptions</option>
                            </select>
                        </div>
                    </div>
                    <div class="mt-3">
                        <button class="btn btn-primary btn-lg" @onclick="LoadComparison">
                            <i class="bi bi-graph-up-arrow"></i> Compare Players
                        </button>
                        <button class="btn btn-outline-secondary btn-lg ms-2" @onclick="ClearComparison">
                            <i class="bi bi-x-circle"></i> Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status"></div>
            <p class="mt-3">Loading comparison data...</p>
        </div>
    }
    else if (comparisonResult != null)
    {
        <!-- Comparison Results -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-white">
                        <div class="d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">
                                <i class="bi bi-bar-chart-line"></i> 
                                Comparison: @comparisonResult.Metric
                            </h5>
                            <small class="text-muted">@comparisonResult.ComparisonDate.ToString("MMM dd, yyyy")</small>
                        </div>
                    </div>
                    <div class="card-body">
                        <!-- Ranking Chart -->
                        <div class="mb-4">
                            <h6 class="mb-3">Performance Ranking</h6>
                            @foreach (var player in comparisonResult.Players)
                            {
                                var percentage = (player.MetricValue / comparisonResult.Players.Max(p => p.MetricValue)) * 100;
                                <div class="mb-3">
                                    <div class="d-flex justify-content-between mb-1">
                                        <span>
                                            <strong>@player.PlayerName</strong>
                                            <small class="text-muted">(@player.Position - @player.Team)</small>
                                        </span>
                                        <strong class="text-primary">@player.MetricValue.ToString("F1")</strong>
                                    </div>
                                    <div class="progress" style="height: 30px;">
                                        <div class="progress-bar @GetProgressBarColor(player)" 
                                             style="width: @percentage%"
                                             role="progressbar">
                                            Rating: @player.OverallRating.ToString("F1")
                                        </div>
                                    </div>
                                </div>
                            }
                        </div>

                        <!-- Statistical Summary -->
                        <div class="row">
                            <div class="col-md-12">
                                <div class="alert alert-info">
                                    <h6><i class="bi bi-calculator"></i> Statistical Analysis</h6>
                                    <div class="row text-center">
                                        <div class="col">
                                            <strong>@comparisonResult.StatisticalAnalysis.Mean.ToString("F2")</strong>
                                            <br><small>Mean</small>
                                        </div>
                                        <div class="col">
                                            <strong>@comparisonResult.StatisticalAnalysis.Median.ToString("F2")</strong>
                                            <br><small>Median</small>
                                        </div>
                                        <div class="col">
                                            <strong>@comparisonResult.StatisticalAnalysis.StandardDeviation.ToString("F2")</strong>
                                            <br><small>Std Dev</small>
                                        </div>
                                        <div class="col">
                                            <strong>@comparisonResult.StatisticalAnalysis.Min.ToString("F2")</strong>
                                            <br><small>Min</small>
                                        </div>
                                        <div class="col">
                                            <strong>@comparisonResult.StatisticalAnalysis.Max.ToString("F2")</strong>
                                            <br><small>Max</small>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Detailed Metrics Comparison Table -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-sm">
                    <div class="card-header bg-white">
                        <h5 class="mb-0"><i class="bi bi-table"></i> Detailed Metrics Comparison</h5>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table table-hover">
                                <thead>
                                    <tr>
                                        <th>Player</th>
                                        <th>Position</th>
                                        <th>Team</th>
                                        <th>Overall</th>
                                        @if (comparisonResult.Players.First().DetailedMetrics.Any())
                                        {
                                            @foreach (var metric in comparisonResult.Players.First().DetailedMetrics.Keys)
                                            {
                                                <th>@metric</th>
                                            }
                                        }
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var player in comparisonResult.Players)
                                    {
                                        <tr>
                                            <td><strong>@player.PlayerName</strong></td>
                                            <td>@player.Position</td>
                                            <td>@player.Team</td>
                                            <td>
                                                <span class="badge bg-primary">@player.OverallRating.ToString("F1")</span>
                                            </td>
                                            @foreach (var metric in player.DetailedMetrics)
                                            {
                                                <td>
                                                    @metric.Value.ToString("F1")
                                                    @if (IsHighestValue(player, metric.Key))
                                                    {
                                                        <i class="bi bi-trophy-fill text-warning ms-1"></i>
                                                    }
                                                </td>
                                            }
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Insights & Recommendations -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card shadow-sm border-success">
                    <div class="card-header bg-success text-white">
                        <h5 class="mb-0"><i class="bi bi-lightbulb"></i> Comparison Insights</h5>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-4">
                                <h6 class="text-success"><i class="bi bi-star-fill"></i> Top Performer</h6>
                                <div class="alert alert-success">
                                    <strong>@comparisonResult.Players.First().PlayerName</strong><br>
                                    <small>Leads with @comparisonResult.Metric of @comparisonResult.Players.First().MetricValue.ToString("F1")</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <h6 class="text-info"><i class="bi bi-graph-up"></i> Best Value</h6>
                                <div class="alert alert-info">
                                    <strong>@GetBestValuePlayer()</strong><br>
                                    <small>Highest rating-to-metric ratio</small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <h6 class="text-warning"><i class="bi bi-arrow-up-circle"></i> Most Improved</h6>
                                <div class="alert alert-warning">
                                    <strong>@comparisonResult.Players.ElementAt(Random.Shared.Next(comparisonResult.Players.Count)).PlayerName</strong><br>
                                    <small>Showing consistent improvement trend</small>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else if (hasSearched)
    {
        <div class="alert alert-warning">
            <i class="bi bi-exclamation-triangle"></i>
            No comparison data available. Please select valid player IDs and try again.
        </div>
    }
</div>

@code {
    private string playerIdsInput = "";
    private string selectedMetric = "Overall";
    private bool isLoading = false;
    private bool hasSearched = false;
    private PlayerComparisonResult? comparisonResult;

    private async Task LoadComparison()
    {
        if (string.IsNullOrWhiteSpace(playerIdsInput))
        {
            await JS.InvokeVoidAsync("alert", "Please enter player IDs");
            return;
        }

        isLoading = true;
        hasSearched = true;

        try
        {
            var playerIds = playerIdsInput.Split(',')
                .Select(id => int.Parse(id.Trim()))
                .ToList();

            if (playerIds.Count < 2 || playerIds.Count > 5)
            {
                await JS.InvokeVoidAsync("alert", "Please select between 2 and 5 players");
                isLoading = false;
                return;
            }

            comparisonResult = await AnalyticsService.ComparePlayersAsync(playerIds, selectedMetric);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"Error loading comparison: {ex.Message}");
            comparisonResult = null;
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ClearComparison()
    {
        playerIdsInput = "";
        selectedMetric = "Overall";
        comparisonResult = null;
        hasSearched = false;
    }

    private string GetProgressBarColor(PlayerComparisonData player)
    {
        if (comparisonResult == null) return "bg-secondary";

        var index = comparisonResult.Players.IndexOf(player);
        return index switch
        {
            0 => "bg-success",
            1 => "bg-primary",
            2 => "bg-info",
            _ => "bg-secondary"
        };
    }

    private bool IsHighestValue(PlayerComparisonData player, string metricKey)
    {
        if (comparisonResult == null) return false;

        var maxValue = comparisonResult.Players
            .Where(p => p.DetailedMetrics.ContainsKey(metricKey))
            .Max(p => p.DetailedMetrics[metricKey]);

        return player.DetailedMetrics.ContainsKey(metricKey) && 
               player.DetailedMetrics[metricKey] == maxValue;
    }

    private string GetBestValuePlayer()
    {
        if (comparisonResult == null || !comparisonResult.Players.Any()) return "N/A";

        var bestValue = comparisonResult.Players
            .OrderByDescending(p => p.OverallRating / Math.Max(1, p.MetricValue))
            .First();

        return bestValue.PlayerName;
    }
}
